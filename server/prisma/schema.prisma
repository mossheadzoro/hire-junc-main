generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int       @id @default(autoincrement())
  email            String    @unique
  password         String
  isSocialLogin    Boolean?  @default(false)
  description      String?
  fullName         String?
  isProfileInfoSet Boolean?  @default(false)
  profileImage     String?
  username         String?   @unique
  createdAt        DateTime  @default(now())
  gigs             Gigs[]
  messagesReceived Message[] @relation("ReceivedMessages")
  messagesSent     Message[] @relation("SentMessages")
  orders           Orders[]
  reviews          Reviews[]
}

model Gigs {
  id           Int       @id @default(autoincrement())
  title        String
  description  String
  category     String    // Existing category field (e.g., Video Animation, Web Design)
  mainCategory String  // New field to store "Technical" or "Non-Technical"
  deliveryTime Int
  revisions    Int
  features     String[]
  price        Int
  images       String[]
  userId       Int
  createdAt    DateTime  @default(now())
  shortDesc    String
  createdBy    User      @relation(fields: [userId], references: [id])
  orders       Orders[]
  reviews      Reviews[]
}



model Orders {
  id            Int       @id @default(autoincrement())
  createdAt     DateTime  @default(now())
  buyerId       Int
  paymentIntent String    @unique
  isCompleted   Boolean   @default(false)
  isApproved    Boolean   @default(false)
  gigId         Int
  price         Int
  messages      Message[]
  buyer         User      @relation(fields: [buyerId], references: [id])
  gig           Gigs      @relation(fields: [gigId], references: [id])
}

model Reviews {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  rating     Int
  reviewText String?
  gigId      Int
  reviewerId Int
  gig        Gigs     @relation(fields: [gigId], references: [id])
  reviewer   User     @relation(fields: [reviewerId], references: [id])
}

model Message {
  id          Int      @id @default(autoincrement())
  text        String
  createdAt   DateTime @default(now())
  isRead      Boolean  @default(false)
  order       Orders   @relation(fields: [orderId], references: [id])
  orderId     Int
  recipient   User     @relation("ReceivedMessages", fields: [recipientId], references: [id])
  recipientId Int
  sender      User     @relation("SentMessages", fields: [senderId], references: [id])
  senderId    Int
  fileUrl     String?
}

